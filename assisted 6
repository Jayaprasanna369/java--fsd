class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SortedCircularLinkedList {
    Node head;

    // Function to insert a new node into a sorted circular linked list
    void insert(int data) {
        Node newNode = new Node(data);

        // If the list is empty, make the new node as the head and point to itself
        if (head == null) {
            head = newNode;
            newNode.next = head;
        } else if (data <= head.data) {
            // If the new node's data is less than or equal to the head's data,
            // insert it before the head and update the head
            newNode.next = head;
            Node last = getLastNode();
            last.next = newNode;
            head = newNode;
        } else {
            // Traverse the list to find the appropriate position to insert the new node
            Node current = head;
            while (current.next != head && current.next.data < data) {
                current = current.next;
            }

            // Insert the new node in the correct position
            newNode.next = current.next;
            current.next = newNode;
        }
    }

    // Function to display the elements of the circular linked list
    void display() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node current = head;
        do {
            System.out.print(current.data + " ");
            current = current.next;
        } while (current != head);

        System.out.println();
    }

    // Function to get the last node in the circular linked list
    private Node getLastNode() {
        Node last = head;
        while (last.next != head) {
            last = last.next;
        }
        return last;
    }
}

public class Main {
    public static void main(String[] args) {
        SortedCircularLinkedList list = new SortedCircularLinkedList();

        // Inserting elements into the sorted circular linked list
        list.insert(5);
        list.insert(2);
        list.insert(8);
        list.insert(1);

        // Displaying the elements of the sorted circular linked list
        System.out.print("Sorted Circular Linked List: ");
        list.display();
    }
}
